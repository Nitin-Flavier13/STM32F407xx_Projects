
CAN_Protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  08000444  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  08000444  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800044c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006a3  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000179  00000000  00000000  000206d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00020850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  000208b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a2d9  00000000  00000000  00020908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000579  00000000  00000000  0002abe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00037a4d  00000000  00000000  0002b15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00062ba7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e8  00000000  00000000  00062bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800042c 	.word	0x0800042c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	0800042c 	.word	0x0800042c

080001e8 <Set_Pin>:
#include <stm32f4xx.h>

uint8_t count = 1;

void Set_Pin(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 1);               // GPIOB enabled
 80001ec:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <Set_Pin+0x30>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <Set_Pin+0x30>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB->MODER |= (0xA << 16);          // Alternate functionality mode
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <Set_Pin+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <Set_Pin+0x34>)
 80001fe:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000202:	6013      	str	r3, [r2, #0]

    // Setting AFR_H for port B pin 8,9 we are making it as CAN_Rx(8) & CAN_Tx(9)
    GPIOB->AFR[1] |= (0x9 | (0x9 << 4));
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <Set_Pin+0x34>)
 8000206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <Set_Pin+0x34>)
 800020a:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 800020e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	40023800 	.word	0x40023800
 800021c:	40020400 	.word	0x40020400

08000220 <CAN_Init>:

void CAN_Init(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1<<25);     // Enable CAN 1 clock
 8000224:	4b31      	ldr	r3, [pc, #196]	; (80002ec <CAN_Init+0xcc>)
 8000226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000228:	4a30      	ldr	r2, [pc, #192]	; (80002ec <CAN_Init+0xcc>)
 800022a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800022e:	6413      	str	r3, [r2, #64]	; 0x40
    by setting the INRQ or SLEEP bits in the CAN_MCR register. Once the mode has been
    entered, bxCAN confirms it by setting the INAK or SLAK bits in the CAN_MSR register
 */


    CAN1->MCR |= (1<<0);       // CAN INRQ requesting it to enter into initialization
 8000230:	4b2f      	ldr	r3, [pc, #188]	; (80002f0 <CAN_Init+0xd0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a2e      	ldr	r2, [pc, #184]	; (80002f0 <CAN_Init+0xd0>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6013      	str	r3, [r2, #0]
    while(!(CAN1->MSR & 0x1));   // Mode has been entered it is acknowledged
 800023c:	bf00      	nop
 800023e:	4b2c      	ldr	r3, [pc, #176]	; (80002f0 <CAN_Init+0xd0>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f9      	beq.n	800023e <CAN_Init+0x1e>

    //CAN1->BTR |= (1<<30);      // CAN LoopBack Mode here

    CAN1->BTR &= ~(3<<24);     // SWJ 1 Time Quantum
 800024a:	4b29      	ldr	r3, [pc, #164]	; (80002f0 <CAN_Init+0xd0>)
 800024c:	69db      	ldr	r3, [r3, #28]
 800024e:	4a28      	ldr	r2, [pc, #160]	; (80002f0 <CAN_Init+0xd0>)
 8000250:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000254:	61d3      	str	r3, [r2, #28]

    CAN1->BTR &= ~(0x7F << 16);
 8000256:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <CAN_Init+0xd0>)
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	4a25      	ldr	r2, [pc, #148]	; (80002f0 <CAN_Init+0xd0>)
 800025c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000260:	61d3      	str	r3, [r2, #28]

    CAN1->BTR |= (12 << 16);   // Time Segment 1
 8000262:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <CAN_Init+0xd0>)
 8000264:	69db      	ldr	r3, [r3, #28]
 8000266:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <CAN_Init+0xd0>)
 8000268:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800026c:	61d3      	str	r3, [r2, #28]
    CAN1->BTR |= (1 << 20);     // Time Segment 2
 800026e:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <CAN_Init+0xd0>)
 8000270:	69db      	ldr	r3, [r3, #28]
 8000272:	4a1f      	ldr	r2, [pc, #124]	; (80002f0 <CAN_Init+0xd0>)
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	61d3      	str	r3, [r2, #28]

    CAN1->BTR |= (7 << 0);      // Baud-Rate Prescaler
 800027a:	4b1d      	ldr	r3, [pc, #116]	; (80002f0 <CAN_Init+0xd0>)
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <CAN_Init+0xd0>)
 8000280:	f043 0307 	orr.w	r3, r3, #7
 8000284:	61d3      	str	r3, [r2, #28]

    /*
       Exit Initialization mode
       Wait until INAK bit is cleared by hardware
    */
    CAN1->MCR &= ~(1<<0);
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <CAN_Init+0xd0>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <CAN_Init+0xd0>)
 800028c:	f023 0301 	bic.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
    while(CAN1->MSR & 0x1);
 8000292:	bf00      	nop
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <CAN_Init+0xd0>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d1f9      	bne.n	8000294 <CAN_Init+0x74>
    /*
       Exit Sleep mode
       Wait until INAK bit is
       cleared by hardware
    */
    CAN1->MCR &= ~(1 << 1);
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <CAN_Init+0xd0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <CAN_Init+0xd0>)
 80002a6:	f023 0302 	bic.w	r3, r3, #2
 80002aa:	6013      	str	r3, [r2, #0]
    while(CAN1->MSR & 0x2);
 80002ac:	bf00      	nop
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <CAN_Init+0xd0>)
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	f003 0302 	and.w	r3, r3, #2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1f9      	bne.n	80002ae <CAN_Init+0x8e>

    /* Setting Up Transmission */

    CAN1->sTxMailBox[0].TIR = 0;
 80002ba:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <CAN_Init+0xd0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    CAN1->sTxMailBox[0].TIR |= (138 << 21);    // STD ID : 138
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <CAN_Init+0xd0>)
 80002c4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80002c8:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <CAN_Init+0xd0>)
 80002ca:	f043 538a 	orr.w	r3, r3, #289406976	; 0x11400000
 80002ce:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

    CAN1->sTxMailBox[0].TDHR = 0;     // Data byte 4, 5, 6, 7
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <CAN_Init+0xd0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    CAN1->sTxMailBox[0].TDTR = 1;    // Sending only 1 byte
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <CAN_Init+0xd0>)
 80002dc:	2201      	movs	r2, #1
 80002de:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40006400 	.word	0x40006400

080002f4 <CAN_Tx>:

void CAN_Tx(uint8_t message)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
    CAN1->sTxMailBox[0].TDLR = message;
 80002fe:	4a08      	ldr	r2, [pc, #32]	; (8000320 <CAN_Tx+0x2c>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188

    /* Request for transmission */
    CAN1->sTxMailBox[0].TIR |= 1;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <CAN_Tx+0x2c>)
 8000308:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <CAN_Tx+0x2c>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40006400 	.word	0x40006400

08000324 <delay>:

void delay(uint32_t l)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
    for(uint32_t i=0;i<1000*l;i++);
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	e002      	b.n	8000338 <delay+0x14>
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	3301      	adds	r3, #1
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800033e:	fb02 f303 	mul.w	r3, r2, r3
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	429a      	cmp	r2, r3
 8000346:	d3f4      	bcc.n	8000332 <delay+0xe>
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <main>:

int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
    Set_Pin();             // Configure GPIOB 8 as CAN-Tx & GPIOB 9 as CAN-Rx
 8000358:	f7ff ff46 	bl	80001e8 <Set_Pin>
    CAN_Init();
 800035c:	f7ff ff60 	bl	8000220 <CAN_Init>

    while(1)
    {
    	CAN_Tx(count);
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <main+0x38>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffc5 	bl	80002f4 <CAN_Tx>
        delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f7ff ffda 	bl	8000324 <delay>
        count++;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <main+0x38>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <main+0x38>)
 800037a:	701a      	strb	r2, [r3, #0]
        if(count > 100)
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <main+0x38>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b64      	cmp	r3, #100	; 0x64
 8000382:	d9ed      	bls.n	8000360 <main+0xc>
        	count = 1;
 8000384:	4b01      	ldr	r3, [pc, #4]	; (800038c <main+0x38>)
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
    	CAN_Tx(count);
 800038a:	e7e9      	b.n	8000360 <main+0xc>
 800038c:	20000000 	.word	0x20000000

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	; (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	; (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ffc7 	bl	8000354 <main>

080003c6 <LoopForever>:

LoopForever:
    b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003dc:	20000020 	.word	0x20000020

080003e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	; (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	; (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	; (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	; (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
